#pragma once

// generated by sqlite2cpp.py ddl.txt trees trees

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace trees
{
  namespace Blocks_
  {
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::must_not_update>;
    };
    struct SetSize
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "set_size";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T setSize;
            T& operator()() { return setSize; }
            const T& operator()() const { return setSize; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct SetStr
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "set_str";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T setStr;
            T& operator()() { return setStr; }
            const T& operator()() const { return setStr; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
  } // namespace Blocks_

  struct Blocks: sqlpp::table_t<Blocks,
               Blocks_::Id,
               Blocks_::SetSize,
               Blocks_::SetStr>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "blocks";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T blocks;
        T& operator()() { return blocks; }
        const T& operator()() const { return blocks; }
      };
    };
  };
  
  namespace Trees_
  {
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::must_not_insert, sqlpp::tag::must_not_update, sqlpp::tag::can_be_null>;
    };
    struct Branches
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "branches";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T branches;
            T& operator()() { return branches; }
            const T& operator()() const { return branches; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
    struct Degrees
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "degrees";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T degrees;
            T& operator()() { return degrees; }
            const T& operator()() const { return degrees; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
    struct SetSize
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "set_size";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T setSize;
            T& operator()() { return setSize; }
            const T& operator()() const { return setSize; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
  } // namespace Trees_

  struct Trees: sqlpp::table_t<Trees,
               Trees_::Id,
               Trees_::Branches,
               Trees_::Degrees,
               Trees_::SetSize>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "trees";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T trees;
        T& operator()() { return trees; }
        const T& operator()() const { return trees; }
      };
    };
  };
} // namespace trees
